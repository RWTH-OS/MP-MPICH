dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT([ch_shmem],[1])
AC_PREREQ(2.59)
AC_REVISION($Revision$)

# Evil hack to get PACKAGE_* out of the header file
echo > confdefs.h

AC_CONFIG_HEADER(shmem-mpid.h)

AC_ARG_ENABLE([sysv],AS_HELP_STRING(--enable-sysv,
	      [This option causes the device to attempt and use System V shared
	       memory and semaphore routines rather than what would be chosen
l	       by default (often mmap or a system-specific method).
l	       (ch_shmem/ch_lfshmem)]),,
	      [enable_sysv=no])

# Solaris has -lthread containing mutex_init
AC_CHECK_LIB(thread,mutex_init)

# the C compiler might include this for us, but the Fortran compiler
# does not

# Shared-memory (processes) device.  Only need to set mpirun default machine.
AC_CHECK_FUNCS(msem_init,have_msem_init=1)
if test "$have_msem_init" = 1 ; then
    # If have msem_init, we need to see if we need struct msemaphore or just
    # msemaphore.
    AC_MSG_CHECKING([Is msemaphore a typedef or struct name?])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <ctype.h>
#include <sys/mman.h>]], [[
typedef struct msemaphore MPID_Msemaphore;
typedef struct { MPID_Msemaphor lock; int a; } Msem;
Msem sem;
       ]])],[is_struct=1],[is_struct=0])
     if test $is_struct = 1 ; then
	AC_DEFINE(MSEMAPHORE_IS_STRUCT,1,
	    [Define if struct msemaphore rather than msemaphore required])
	AC_MSG_RESULT(struct)
     else
	AC_MSG_RESULT(typedef)
     fi
fi
#
# Here's a horrible "feature".  Solaris includes null stubs for 
# mutex_init in libc (!), so that users can build threaded code that
# doesn't work (rather than putting this null stubs in -lnothread, 
# where they belong).  Thus, if mutex_init IS found, we need to 
# check for -lthread.   (Which we should have done above)
#
AC_CHECK_FUNCS(mutex_init strerror shmat semop mmap)

# XOPEN mandates that union semun NOT be defined(!)
AC_MSG_CHECKING(for union semun)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>]], [[
union semun arg;arg.val=0;]])],[AC_MSG_RESULT(defined)],
[AC_DEFINE(SEMUN_UNDEFINED,1,
	[Define this if the union semun that is REQUIRED for semctl is NOT
	 defined by ANY system header file])
AC_MSG_RESULT(undefined)])
#
# See if we can use an int in semctl or if we need the union
AC_MSG_CHECKING(whether semctl needs union semun)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>]], [[
int arg = 0; semctl( 1, 1, SETVAL, arg );]])],[AC_MSG_RESULT(no)],
[AC_DEFINE(SEMCTL_ARG_UNION,1,[Define this is semctl requires a union semun])
AC_MSG_RESULT(yes)])
#
# This should check for shmat and semop first
if test "$enable_sysv" = yes ; then
    AC_MSG_NOTICE([using System V shared memory])
    AC_DEFINE(SHMEM_PICKED,1,[Define this to force a choice of shared memory allocator])
    # we must undefine any other USE_xxx chosen
fi
# Look for sigaction routine (instead of signal)
AC_CHECK_FUNCS(sigaction)
# To use sigaction, you also need the struct sigaction.  We've had
# some systems mess this up
AC_MSG_CHECKING(for struct sigaction)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]], [[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT );]])],[sigaction_ok="yes"],[sigaction_ok="no"])
AC_MSG_RESULT($sigaction_ok)
AC_CHECK_FUNCS(sigprocmask signal sigmask sigset)
# Also need to get signal hander arg count 1? 3? 4? something else?
AC_TYPE_SIGNAL
#
AC_CONFIG_FILES([localdefs])
AC_OUTPUT
