# $Id$
# Since this is the top-level makefile for all tests, it does not need to
# compile anything.

TESTDIRS := pt2pt coll topol env context profile ssided resources command
SUBDIRS := util pt2pt coll topol env context profile ssided resources command

ifeq (@ROMIO@,1)
TESTDIRS += io
SUBDIRS += io
endif

srcdir := @srcdir@

default: subdirs
	@echo "Type \"make testing\" to compile and run tests"

subdirs:
	@for dir in $(SUBDIRS) ;\
		do \
			echo " " ;\
			echo "   Making in directory $$dir" ;\
			if [ -d $$dir -a -s $$dir/Makefile ] ; then \
			    (cd $$dir && $(MAKE)) || exit 1 ; fi ;\
		done

linktest:
	@for dir in $(SUBDIRS) ;\
		do \
			echo " " ;\
			echo "   Making linktest in directory $$dir" ;\
			if [ -d $$dir -a -s $$dir/Makefile ] ; then \
			    (cd $$dir && $(MAKE) linktest) || exit 1 ; fi ;\
		done

# Make sure that everything works (don't run the tests if mpirun fails
# for some reason).  We use runtests to handle finding and setting the mpirun
# environment (only the pt2pt test has this option).  runtest exits with 1 if
# the test fails, which will cause the Make to exit.
runtest:
	@if [ -z "$(TESTARGS)" ] ; then \
	echo "If you have compiled more than one device (such as ch_usock and ch_shmem),"; \
	echo "you have to specify which device to use for the tests by passing arguments to"; \
	echo "the mpirun-call. This is done by using \"-margs=''\", e.g.:" ;\
	echo "make TESTARGS=\"-small -margs='-machine ch_usock -nodes p4-01,p4-02'\" testing" ; \
	fi
	cd util && $(MAKE)
	cd pt2pt && ./runtests $(TESTARGS) -check


# This also cleans the files after the testing to keep the
# total size down.  You can use TESTARGS to pass arguments to the
# test program; for example,
# make TESTARGS="-echo"
# to run in "echo" mode (show what scripts are doing)
# The tests are run in "small" mode (build one executable at a time) to
# reduce the amount of disk space that is used.
# The make clean is directed into dev null to keep the testing as
# quiet as possible.
# We export the MPITEST_STOPTEST environment variable to allow the
# user to set an alternate file to be used to abort the tests; this
# is especially useful for automated tests.
testing: runtest
	@rm -f summary.xml
	@echo "<?xml version='1.0' ?>" > summary.xml
	@echo '<?xml-stylesheet href="er.xsl" type="text/xsl" ?>' >> summary.xml
	@echo '<MPITESTRESULTS>' >> summary.xml
	@echo "<DATE>`date`</DATE>" >> summary.xml
	@echo "<MPISOURCE>$(srcdir)</MPISOURCE>" >> summary.xml
	@-for dir in $(TESTDIRS) ;\
		do \
			if [ ! -d $$dir -o ! -s $$dir/Makefile ] ; then \
				continue ; fi ; \
			echo " " ;\
			echo "   Making testing in directory $$dir" ;\
			(export MPITEST_STOPTEST && cd $$dir && $(MAKE) testing TESTARGS="-small -summaryfile=../summary.xml $(TESTARGS)" && \
			 $(MAKE) clean > /dev/null 2>&1 ) || exit 1 ;\
		done
	@echo '</MPITESTRESULTS>' >> summary.xml

# This is a version of testing, but it saves the "diff" files in the top
# level directory
testing_save: runtest
	@-for dir in $(TESTDIRS) ;\
		do \
			if [ ! -d $$dir -o ! -s $$dir/Makefile ] ; then \
				continue ; fi ; \
			echo " " ;\
			echo "   Making testing in directory $$dir" ;\
			(cd $$dir && $(MAKE) testing TESTARGS="-small $(TESTARGS)" && \
			 if [ -s $$dir.diff ] ; then cp $$dir.diff .. ; fi && \
			 $(MAKE) clean > /dev/null 2>&1 ) || exit 1 ;\
		done

clean:
	@for dir in $(SUBDIRS) ;\
		do \
			if [ ! -d $$dir -o ! -s $$dir/Makefile ] ; then \
			    continue ; fi ; \
			echo "     directory test/$$dir" ;\
			(cd $$dir && $(MAKE) clean) || exit 1 ;\
		done
	-rm -f test.log testing.log *.diff *.o sendchar sendshort sendvector \
		sendstruct work.pc work.pcl

distclean: clean
	@for dir in $(SUBDIRS) ;\
		do \
			if [ ! -d $$dir -o ! -s $$dir/Makefile ] ; then \
			    continue ; fi ; \
			echo "     directory test/$$dir" ;\
			(cd $$dir && $(MAKE) distclean) || exit 1 ;\
		done
	-rm -f Makefile runtests config.status config.log command/runtests
